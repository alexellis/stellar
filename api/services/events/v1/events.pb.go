// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/events/v1/events.proto

package events

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7746ac49ad7b87aa, []int{0}
}
func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

type InfoResponse struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7746ac49ad7b87aa, []int{1}
}
func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoResponse.Unmarshal(m, b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return xxx_messageInfo_InfoResponse.Size(m)
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type EndpointRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndpointRequest) Reset()         { *m = EndpointRequest{} }
func (m *EndpointRequest) String() string { return proto.CompactTextString(m) }
func (*EndpointRequest) ProtoMessage()    {}
func (*EndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7746ac49ad7b87aa, []int{2}
}
func (m *EndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndpointRequest.Unmarshal(m, b)
}
func (m *EndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndpointRequest.Marshal(b, m, deterministic)
}
func (m *EndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointRequest.Merge(m, src)
}
func (m *EndpointRequest) XXX_Size() int {
	return xxx_messageInfo_EndpointRequest.Size(m)
}
func (m *EndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointRequest proto.InternalMessageInfo

type Endpoint struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Endpoint) Reset()         { *m = Endpoint{} }
func (m *Endpoint) String() string { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()    {}
func (*Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_7746ac49ad7b87aa, []int{3}
}
func (m *Endpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Endpoint.Unmarshal(m, b)
}
func (m *Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Endpoint.Marshal(b, m, deterministic)
}
func (m *Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoint.Merge(m, src)
}
func (m *Endpoint) XXX_Size() int {
	return xxx_messageInfo_Endpoint.Size(m)
}
func (m *Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoint proto.InternalMessageInfo

func (m *Endpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type EndpointResponse struct {
	Endpoint             *Endpoint `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EndpointResponse) Reset()         { *m = EndpointResponse{} }
func (m *EndpointResponse) String() string { return proto.CompactTextString(m) }
func (*EndpointResponse) ProtoMessage()    {}
func (*EndpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7746ac49ad7b87aa, []int{4}
}
func (m *EndpointResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndpointResponse.Unmarshal(m, b)
}
func (m *EndpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndpointResponse.Marshal(b, m, deterministic)
}
func (m *EndpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointResponse.Merge(m, src)
}
func (m *EndpointResponse) XXX_Size() int {
	return xxx_messageInfo_EndpointResponse.Size(m)
}
func (m *EndpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointResponse proto.InternalMessageInfo

func (m *EndpointResponse) GetEndpoint() *Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type SubscribeRequest struct {
	Subject              string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7746ac49ad7b87aa, []int{5}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type Message struct {
	Subject              string     `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Data                 *types.Any `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_7746ac49ad7b87aa, []int{6}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Message) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "stellar.services.events.v1.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "stellar.services.events.v1.InfoResponse")
	proto.RegisterType((*EndpointRequest)(nil), "stellar.services.events.v1.EndpointRequest")
	proto.RegisterType((*Endpoint)(nil), "stellar.services.events.v1.Endpoint")
	proto.RegisterType((*EndpointResponse)(nil), "stellar.services.events.v1.EndpointResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "stellar.services.events.v1.SubscribeRequest")
	proto.RegisterType((*Message)(nil), "stellar.services.events.v1.Message")
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/events/v1/events.proto", fileDescriptor_7746ac49ad7b87aa)
}

var fileDescriptor_7746ac49ad7b87aa = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0xee, 0xd2, 0x40,
	0x14, 0xc5, 0x43, 0xf3, 0x0f, 0x1f, 0x17, 0x8d, 0x38, 0x21, 0x04, 0xeb, 0x42, 0x53, 0x89, 0x92,
	0x48, 0x66, 0x04, 0x57, 0x86, 0x85, 0x4a, 0xc4, 0x84, 0x05, 0x89, 0xa9, 0x6e, 0x74, 0xe5, 0xb4,
	0xbd, 0x94, 0x31, 0xa5, 0x53, 0x3b, 0xd3, 0x26, 0xf8, 0xb0, 0x2e, 0x7c, 0x06, 0x1f, 0xc0, 0xb4,
	0x9d, 0x22, 0xc1, 0x80, 0xfc, 0x77, 0xf7, 0xe3, 0x9c, 0xde, 0x93, 0x5f, 0x3a, 0xf0, 0x3a, 0x14,
	0x7a, 0x9b, 0x79, 0xd4, 0x97, 0x3b, 0x86, 0x5b, 0xfe, 0x23, 0x42, 0xad, 0x99, 0xd2, 0x18, 0x45,
	0x3c, 0x65, 0x3c, 0x11, 0x4c, 0x61, 0x9a, 0x0b, 0x1f, 0x15, 0xc3, 0x1c, 0x63, 0xad, 0x58, 0x3e,
	0x35, 0x15, 0x4d, 0x52, 0xa9, 0x25, 0xb1, 0x8d, 0x98, 0xd6, 0x42, 0x6a, 0xd6, 0xf9, 0xd4, 0xee,
	0x87, 0x32, 0x94, 0xa5, 0x8c, 0x15, 0x55, 0xe5, 0xb0, 0x1f, 0x84, 0x52, 0x86, 0x11, 0xb2, 0xb2,
	0xf3, 0xb2, 0x0d, 0xe3, 0xf1, 0xde, 0xac, 0x1e, 0x9e, 0xae, 0x70, 0x97, 0x68, 0xb3, 0x74, 0xee,
	0x42, 0x77, 0x15, 0x6f, 0xa4, 0x8b, 0xdf, 0x33, 0x54, 0xda, 0x79, 0x0a, 0x77, 0xaa, 0x56, 0x25,
	0x32, 0x56, 0x48, 0x06, 0x60, 0x89, 0x60, 0xd8, 0x78, 0xdc, 0x18, 0x77, 0x16, 0xcd, 0x5f, 0x3f,
	0x1f, 0x59, 0xab, 0x77, 0xae, 0x25, 0x02, 0xe7, 0x3e, 0xdc, 0x5b, 0xc6, 0x41, 0x22, 0x45, 0xac,
	0x6b, 0xeb, 0x08, 0xda, 0xf5, 0x88, 0x0c, 0xa1, 0xc5, 0x83, 0x20, 0x45, 0xa5, 0x2a, 0xaf, 0x5b,
	0xb7, 0xce, 0x27, 0xe8, 0xfd, 0x35, 0x9a, 0x23, 0x6f, 0xa0, 0x8d, 0x66, 0x56, 0xca, 0xbb, 0xb3,
	0x11, 0x3d, 0x0f, 0x80, 0x1e, 0xfc, 0x07, 0x97, 0x33, 0x81, 0xde, 0xc7, 0xcc, 0x53, 0x7e, 0x2a,
	0x3c, 0x34, 0x79, 0x8a, 0x0c, 0x2a, 0xf3, 0xbe, 0xa1, 0xaf, 0xeb, 0x0c, 0xa6, 0x75, 0xd6, 0xd0,
	0x5a, 0xa3, 0x52, 0x3c, 0xc4, 0xf3, 0x22, 0x32, 0x86, 0x9b, 0x80, 0x6b, 0x3e, 0xb4, 0xca, 0x40,
	0x7d, 0x5a, 0x41, 0xa4, 0x35, 0x44, 0xfa, 0x36, 0xde, 0xbb, 0xa5, 0x62, 0xf6, 0xdb, 0x82, 0xe6,
	0xb2, 0x4c, 0x47, 0x3e, 0xc3, 0x4d, 0x81, 0x8f, 0x3c, 0xbb, 0x94, 0xff, 0x88, 0xb7, 0x3d, 0xfe,
	0xbf, 0xd0, 0x40, 0xc2, 0x23, 0xbc, 0xcf, 0xaf, 0xc2, 0x63, 0x4e, 0x4c, 0xae, 0x13, 0x9b, 0x33,
	0x5f, 0xa1, 0x73, 0x20, 0x49, 0x2e, 0x5a, 0x4f, 0x81, 0xdb, 0x4f, 0x2e, 0xa9, 0x0d, 0xf0, 0x17,
	0x0d, 0xf2, 0x1e, 0x5a, 0x1f, 0x32, 0x2f, 0x12, 0x6a, 0x4b, 0xae, 0x71, 0xd8, 0x83, 0x7f, 0xd0,
	0x2f, 0x8b, 0xff, 0x77, 0x31, 0xff, 0xf2, 0xea, 0xf6, 0xcf, 0x6c, 0x5e, 0x55, 0x5e, 0xb3, 0xfc,
	0xd8, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x69, 0x4b, 0x31, 0xe1, 0xaa, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Events_SubscribeClient, error)
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*types.Empty, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.events.v1.Events/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Endpoint(ctx context.Context, in *EndpointRequest, opts ...grpc.CallOption) (*EndpointResponse, error) {
	out := new(EndpointResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.events.v1.Events/Endpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Events_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Events_serviceDesc.Streams[0], "/stellar.services.events.v1.Events/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Events_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type eventsSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventsSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventsClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/stellar.services.events.v1.Events/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
type EventsServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Endpoint(context.Context, *EndpointRequest) (*EndpointResponse, error)
	Subscribe(*SubscribeRequest, Events_SubscribeServer) error
	Publish(context.Context, *Message) (*types.Empty, error)
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.events.v1.Events/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Endpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Endpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.events.v1.Events/Endpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Endpoint(ctx, req.(*EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).Subscribe(m, &eventsSubscribeServer{stream})
}

type Events_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type eventsSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventsSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Events_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.events.v1.Events/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.events.v1.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Events_Info_Handler,
		},
		{
			MethodName: "Endpoint",
			Handler:    _Events_Endpoint_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Events_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Events_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/ehazlett/stellar/api/services/events/v1/events.proto",
}
