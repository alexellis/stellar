// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/scheduler/v1/scheduler.proto

package scheduler

import (
	context "context"
	fmt "fmt"
	v1 "github.com/ehazlett/stellar/api/services/application/v1"
	v11 "github.com/ehazlett/stellar/api/services/cluster/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ScheduleRequest struct {
	App                  *v1.App     `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	AvailableNodes       []*v11.Node `protobuf:"bytes,2,rep,name=available_nodes,json=availableNodes,proto3" json:"available_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ScheduleRequest) Reset()         { *m = ScheduleRequest{} }
func (m *ScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*ScheduleRequest) ProtoMessage()    {}
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5bf2633cdf3b52d, []int{0}
}
func (m *ScheduleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleRequest.Unmarshal(m, b)
}
func (m *ScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleRequest.Marshal(b, m, deterministic)
}
func (m *ScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleRequest.Merge(m, src)
}
func (m *ScheduleRequest) XXX_Size() int {
	return xxx_messageInfo_ScheduleRequest.Size(m)
}
func (m *ScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleRequest proto.InternalMessageInfo

func (m *ScheduleRequest) GetApp() *v1.App {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *ScheduleRequest) GetAvailableNodes() []*v11.Node {
	if m != nil {
		return m.AvailableNodes
	}
	return nil
}

type ScheduleResponse struct {
	Nodes                []*v11.Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ScheduleResponse) Reset()         { *m = ScheduleResponse{} }
func (m *ScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*ScheduleResponse) ProtoMessage()    {}
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5bf2633cdf3b52d, []int{1}
}
func (m *ScheduleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleResponse.Unmarshal(m, b)
}
func (m *ScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleResponse.Marshal(b, m, deterministic)
}
func (m *ScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleResponse.Merge(m, src)
}
func (m *ScheduleResponse) XXX_Size() int {
	return xxx_messageInfo_ScheduleResponse.Size(m)
}
func (m *ScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleResponse proto.InternalMessageInfo

func (m *ScheduleResponse) GetNodes() []*v11.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*ScheduleRequest)(nil), "stellar.services.scheduler.v1.ScheduleRequest")
	proto.RegisterType((*ScheduleResponse)(nil), "stellar.services.scheduler.v1.ScheduleResponse")
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/scheduler/v1/scheduler.proto", fileDescriptor_b5bf2633cdf3b52d)
}

var fileDescriptor_b5bf2633cdf3b52d = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0xa9, 0x43, 0xd1, 0x0c, 0x9c, 0x04, 0x0f, 0xa3, 0x20, 0xcc, 0xa1, 0xb0, 0x8b, 0x09,
	0xad, 0xa0, 0x07, 0x0f, 0x32, 0xc1, 0x8b, 0x82, 0x87, 0x7a, 0xf3, 0x22, 0x69, 0xfb, 0xa7, 0x0d,
	0xc6, 0x26, 0x26, 0x69, 0x10, 0xbf, 0x87, 0xdf, 0x57, 0xba, 0xb4, 0xeb, 0xe6, 0x40, 0x86, 0xb7,
	0x3c, 0xf8, 0xbd, 0x5f, 0x1f, 0x4d, 0xd0, 0x7d, 0xc1, 0x6d, 0x59, 0xa7, 0x24, 0x93, 0xef, 0x14,
	0x4a, 0xf6, 0x25, 0xc0, 0x5a, 0x6a, 0x2c, 0x08, 0xc1, 0x34, 0x65, 0x8a, 0x53, 0x03, 0xda, 0xf1,
	0x0c, 0x0c, 0x35, 0x59, 0x09, 0x79, 0x2d, 0x40, 0x53, 0x17, 0xf5, 0x81, 0x28, 0x2d, 0xad, 0xc4,
	0x27, 0x6d, 0x85, 0x74, 0x38, 0xe9, 0x09, 0x17, 0x85, 0xc7, 0x85, 0x2c, 0xe4, 0x82, 0xa4, 0xcd,
	0xc9, 0x97, 0xc2, 0xf3, 0x35, 0x7f, 0x26, 0x6a, 0x63, 0xbd, 0xbd, 0x3d, 0xb6, 0xd8, 0xc5, 0x1a,
	0xc6, 0x94, 0x12, 0x3c, 0x63, 0x96, 0xcb, 0xaa, 0x41, 0x57, 0xa2, 0xc7, 0xa7, 0xdf, 0x01, 0x1a,
	0x3d, 0xb7, 0x1f, 0x4f, 0xe0, 0xa3, 0x06, 0x63, 0xf1, 0x15, 0x1a, 0x30, 0xa5, 0xc6, 0xc1, 0x24,
	0x98, 0x0d, 0xe3, 0x33, 0xb2, 0x31, 0x76, 0xd5, 0xe2, 0x22, 0x32, 0x57, 0x2a, 0x69, 0x0a, 0xf8,
	0x01, 0x8d, 0x98, 0x63, 0x5c, 0xb0, 0x54, 0xc0, 0x6b, 0x25, 0x73, 0x30, 0xe3, 0x9d, 0xc9, 0x60,
	0x36, 0x8c, 0x4f, 0x37, 0x1d, 0xdd, 0x68, 0x17, 0x91, 0x27, 0x99, 0x43, 0x72, 0xb8, 0x6c, 0x36,
	0xd1, 0x4c, 0x1f, 0xd1, 0x51, 0x3f, 0xcb, 0x28, 0x59, 0x19, 0xc0, 0xd7, 0x68, 0xd7, 0x5b, 0x83,
	0x6d, 0xad, 0x9e, 0x8f, 0x3f, 0xd1, 0x41, 0x27, 0xd3, 0xf8, 0x0d, 0xed, 0x77, 0x01, 0x13, 0xf2,
	0xe7, 0x4d, 0x90, 0x5f, 0x7f, 0x26, 0xa4, 0x5b, 0xf3, 0x7e, 0xf2, 0xdd, 0xfc, 0xe5, 0xf6, 0x5f,
	0x4f, 0xe6, 0x66, 0x19, 0xd2, 0xbd, 0xc5, 0x45, 0x5d, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0xb6, 0xbf, 0xb6, 0x7c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.scheduler.v1.Scheduler/Schedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.scheduler.v1.Scheduler/Schedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.scheduler.v1.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Schedule",
			Handler:    _Scheduler_Schedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/stellar/api/services/scheduler/v1/scheduler.proto",
}
