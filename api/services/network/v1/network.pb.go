// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/network/v1/network.proto

package network

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{0}
}
func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

type InfoResponse struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{1}
}
func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoResponse.Unmarshal(m, b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return xxx_messageInfo_InfoResponse.Size(m)
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type AllocateSubnetRequest struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateSubnetRequest) Reset()         { *m = AllocateSubnetRequest{} }
func (m *AllocateSubnetRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateSubnetRequest) ProtoMessage()    {}
func (*AllocateSubnetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{2}
}
func (m *AllocateSubnetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateSubnetRequest.Unmarshal(m, b)
}
func (m *AllocateSubnetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateSubnetRequest.Marshal(b, m, deterministic)
}
func (m *AllocateSubnetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateSubnetRequest.Merge(m, src)
}
func (m *AllocateSubnetRequest) XXX_Size() int {
	return xxx_messageInfo_AllocateSubnetRequest.Size(m)
}
func (m *AllocateSubnetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateSubnetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateSubnetRequest proto.InternalMessageInfo

func (m *AllocateSubnetRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type AllocateSubnetResponse struct {
	SubnetCIDR           string   `protobuf:"bytes,1,opt,name=subnet_cidr,json=subnetCidr,proto3" json:"subnet_cidr,omitempty"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateSubnetResponse) Reset()         { *m = AllocateSubnetResponse{} }
func (m *AllocateSubnetResponse) String() string { return proto.CompactTextString(m) }
func (*AllocateSubnetResponse) ProtoMessage()    {}
func (*AllocateSubnetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{3}
}
func (m *AllocateSubnetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateSubnetResponse.Unmarshal(m, b)
}
func (m *AllocateSubnetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateSubnetResponse.Marshal(b, m, deterministic)
}
func (m *AllocateSubnetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateSubnetResponse.Merge(m, src)
}
func (m *AllocateSubnetResponse) XXX_Size() int {
	return xxx_messageInfo_AllocateSubnetResponse.Size(m)
}
func (m *AllocateSubnetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateSubnetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateSubnetResponse proto.InternalMessageInfo

func (m *AllocateSubnetResponse) GetSubnetCIDR() string {
	if m != nil {
		return m.SubnetCIDR
	}
	return ""
}

func (m *AllocateSubnetResponse) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type GetSubnetRequest struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubnetRequest) Reset()         { *m = GetSubnetRequest{} }
func (m *GetSubnetRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubnetRequest) ProtoMessage()    {}
func (*GetSubnetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{4}
}
func (m *GetSubnetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubnetRequest.Unmarshal(m, b)
}
func (m *GetSubnetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubnetRequest.Marshal(b, m, deterministic)
}
func (m *GetSubnetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubnetRequest.Merge(m, src)
}
func (m *GetSubnetRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubnetRequest.Size(m)
}
func (m *GetSubnetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubnetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubnetRequest proto.InternalMessageInfo

func (m *GetSubnetRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type GetSubnetResponse struct {
	SubnetCIDR           string   `protobuf:"bytes,1,opt,name=subnet_cidr,json=subnetCidr,proto3" json:"subnet_cidr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubnetResponse) Reset()         { *m = GetSubnetResponse{} }
func (m *GetSubnetResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubnetResponse) ProtoMessage()    {}
func (*GetSubnetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{5}
}
func (m *GetSubnetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubnetResponse.Unmarshal(m, b)
}
func (m *GetSubnetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubnetResponse.Marshal(b, m, deterministic)
}
func (m *GetSubnetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubnetResponse.Merge(m, src)
}
func (m *GetSubnetResponse) XXX_Size() int {
	return xxx_messageInfo_GetSubnetResponse.Size(m)
}
func (m *GetSubnetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubnetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubnetResponse proto.InternalMessageInfo

func (m *GetSubnetResponse) GetSubnetCIDR() string {
	if m != nil {
		return m.SubnetCIDR
	}
	return ""
}

type DeallocateSubnetRequest struct {
	SubnetCIDR           string   `protobuf:"bytes,1,opt,name=subnet_cidr,json=subnetCidr,proto3" json:"subnet_cidr,omitempty"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeallocateSubnetRequest) Reset()         { *m = DeallocateSubnetRequest{} }
func (m *DeallocateSubnetRequest) String() string { return proto.CompactTextString(m) }
func (*DeallocateSubnetRequest) ProtoMessage()    {}
func (*DeallocateSubnetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{6}
}
func (m *DeallocateSubnetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeallocateSubnetRequest.Unmarshal(m, b)
}
func (m *DeallocateSubnetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeallocateSubnetRequest.Marshal(b, m, deterministic)
}
func (m *DeallocateSubnetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeallocateSubnetRequest.Merge(m, src)
}
func (m *DeallocateSubnetRequest) XXX_Size() int {
	return xxx_messageInfo_DeallocateSubnetRequest.Size(m)
}
func (m *DeallocateSubnetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeallocateSubnetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeallocateSubnetRequest proto.InternalMessageInfo

func (m *DeallocateSubnetRequest) GetSubnetCIDR() string {
	if m != nil {
		return m.SubnetCIDR
	}
	return ""
}

func (m *DeallocateSubnetRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type AllocateIPRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubnetCIDR           string   `protobuf:"bytes,2,opt,name=subnet_cidr,json=subnetCidr,proto3" json:"subnet_cidr,omitempty"`
	Node                 string   `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateIPRequest) Reset()         { *m = AllocateIPRequest{} }
func (m *AllocateIPRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateIPRequest) ProtoMessage()    {}
func (*AllocateIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{7}
}
func (m *AllocateIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIPRequest.Unmarshal(m, b)
}
func (m *AllocateIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIPRequest.Marshal(b, m, deterministic)
}
func (m *AllocateIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPRequest.Merge(m, src)
}
func (m *AllocateIPRequest) XXX_Size() int {
	return xxx_messageInfo_AllocateIPRequest.Size(m)
}
func (m *AllocateIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPRequest proto.InternalMessageInfo

func (m *AllocateIPRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AllocateIPRequest) GetSubnetCIDR() string {
	if m != nil {
		return m.SubnetCIDR
	}
	return ""
}

func (m *AllocateIPRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type AllocateIPResponse struct {
	IP                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateIPResponse) Reset()         { *m = AllocateIPResponse{} }
func (m *AllocateIPResponse) String() string { return proto.CompactTextString(m) }
func (*AllocateIPResponse) ProtoMessage()    {}
func (*AllocateIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{8}
}
func (m *AllocateIPResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateIPResponse.Unmarshal(m, b)
}
func (m *AllocateIPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateIPResponse.Marshal(b, m, deterministic)
}
func (m *AllocateIPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateIPResponse.Merge(m, src)
}
func (m *AllocateIPResponse) XXX_Size() int {
	return xxx_messageInfo_AllocateIPResponse.Size(m)
}
func (m *AllocateIPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateIPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateIPResponse proto.InternalMessageInfo

func (m *AllocateIPResponse) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *AllocateIPResponse) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type GetIPRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPRequest) Reset()         { *m = GetIPRequest{} }
func (m *GetIPRequest) String() string { return proto.CompactTextString(m) }
func (*GetIPRequest) ProtoMessage()    {}
func (*GetIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{9}
}
func (m *GetIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPRequest.Unmarshal(m, b)
}
func (m *GetIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPRequest.Marshal(b, m, deterministic)
}
func (m *GetIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPRequest.Merge(m, src)
}
func (m *GetIPRequest) XXX_Size() int {
	return xxx_messageInfo_GetIPRequest.Size(m)
}
func (m *GetIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPRequest proto.InternalMessageInfo

func (m *GetIPRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetIPRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type GetIPResponse struct {
	IP                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIPResponse) Reset()         { *m = GetIPResponse{} }
func (m *GetIPResponse) String() string { return proto.CompactTextString(m) }
func (*GetIPResponse) ProtoMessage()    {}
func (*GetIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{10}
}
func (m *GetIPResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIPResponse.Unmarshal(m, b)
}
func (m *GetIPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIPResponse.Marshal(b, m, deterministic)
}
func (m *GetIPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIPResponse.Merge(m, src)
}
func (m *GetIPResponse) XXX_Size() int {
	return xxx_messageInfo_GetIPResponse.Size(m)
}
func (m *GetIPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIPResponse proto.InternalMessageInfo

func (m *GetIPResponse) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

type ReleaseIPRequest struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IP                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Node                 string   `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseIPRequest) Reset()         { *m = ReleaseIPRequest{} }
func (m *ReleaseIPRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseIPRequest) ProtoMessage()    {}
func (*ReleaseIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{11}
}
func (m *ReleaseIPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseIPRequest.Unmarshal(m, b)
}
func (m *ReleaseIPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseIPRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseIPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseIPRequest.Merge(m, src)
}
func (m *ReleaseIPRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseIPRequest.Size(m)
}
func (m *ReleaseIPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseIPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseIPRequest proto.InternalMessageInfo

func (m *ReleaseIPRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ReleaseIPRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ReleaseIPRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type SubnetsResponse struct {
	Subnets              []*Subnet `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SubnetsResponse) Reset()         { *m = SubnetsResponse{} }
func (m *SubnetsResponse) String() string { return proto.CompactTextString(m) }
func (*SubnetsResponse) ProtoMessage()    {}
func (*SubnetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{12}
}
func (m *SubnetsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetsResponse.Unmarshal(m, b)
}
func (m *SubnetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetsResponse.Marshal(b, m, deterministic)
}
func (m *SubnetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetsResponse.Merge(m, src)
}
func (m *SubnetsResponse) XXX_Size() int {
	return xxx_messageInfo_SubnetsResponse.Size(m)
}
func (m *SubnetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetsResponse proto.InternalMessageInfo

func (m *SubnetsResponse) GetSubnets() []*Subnet {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type Subnet struct {
	CIDR                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Gateway              string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subnet) Reset()         { *m = Subnet{} }
func (m *Subnet) String() string { return proto.CompactTextString(m) }
func (*Subnet) ProtoMessage()    {}
func (*Subnet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{13}
}
func (m *Subnet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subnet.Unmarshal(m, b)
}
func (m *Subnet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subnet.Marshal(b, m, deterministic)
}
func (m *Subnet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subnet.Merge(m, src)
}
func (m *Subnet) XXX_Size() int {
	return xxx_messageInfo_Subnet.Size(m)
}
func (m *Subnet) XXX_DiscardUnknown() {
	xxx_messageInfo_Subnet.DiscardUnknown(m)
}

var xxx_messageInfo_Subnet proto.InternalMessageInfo

func (m *Subnet) GetCIDR() string {
	if m != nil {
		return m.CIDR
	}
	return ""
}

func (m *Subnet) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

type ConfigureRequest struct {
	Subnet               *Subnet  `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureRequest) Reset()         { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()    {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{14}
}
func (m *ConfigureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureRequest.Unmarshal(m, b)
}
func (m *ConfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureRequest.Marshal(b, m, deterministic)
}
func (m *ConfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest.Merge(m, src)
}
func (m *ConfigureRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigureRequest.Size(m)
}
func (m *ConfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest proto.InternalMessageInfo

func (m *ConfigureRequest) GetSubnet() *Subnet {
	if m != nil {
		return m.Subnet
	}
	return nil
}

type AddRouteRequest struct {
	CIDR                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Target               string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRouteRequest) Reset()         { *m = AddRouteRequest{} }
func (m *AddRouteRequest) String() string { return proto.CompactTextString(m) }
func (*AddRouteRequest) ProtoMessage()    {}
func (*AddRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{15}
}
func (m *AddRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRouteRequest.Unmarshal(m, b)
}
func (m *AddRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRouteRequest.Marshal(b, m, deterministic)
}
func (m *AddRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRouteRequest.Merge(m, src)
}
func (m *AddRouteRequest) XXX_Size() int {
	return xxx_messageInfo_AddRouteRequest.Size(m)
}
func (m *AddRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRouteRequest proto.InternalMessageInfo

func (m *AddRouteRequest) GetCIDR() string {
	if m != nil {
		return m.CIDR
	}
	return ""
}

func (m *AddRouteRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type DeleteRouteRequest struct {
	CIDR                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Target               string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRouteRequest) Reset()         { *m = DeleteRouteRequest{} }
func (m *DeleteRouteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRouteRequest) ProtoMessage()    {}
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{16}
}
func (m *DeleteRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRouteRequest.Unmarshal(m, b)
}
func (m *DeleteRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRouteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRouteRequest.Merge(m, src)
}
func (m *DeleteRouteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRouteRequest.Size(m)
}
func (m *DeleteRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRouteRequest proto.InternalMessageInfo

func (m *DeleteRouteRequest) GetCIDR() string {
	if m != nil {
		return m.CIDR
	}
	return ""
}

func (m *DeleteRouteRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type Route struct {
	CIDR                 string   `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Target               string   `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{17}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetCIDR() string {
	if m != nil {
		return m.CIDR
	}
	return ""
}

func (m *Route) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type RoutesResponse struct {
	Routes               []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutesResponse) Reset()         { *m = RoutesResponse{} }
func (m *RoutesResponse) String() string { return proto.CompactTextString(m) }
func (*RoutesResponse) ProtoMessage()    {}
func (*RoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e613a22b6bc199d, []int{18}
}
func (m *RoutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutesResponse.Unmarshal(m, b)
}
func (m *RoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutesResponse.Marshal(b, m, deterministic)
}
func (m *RoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutesResponse.Merge(m, src)
}
func (m *RoutesResponse) XXX_Size() int {
	return xxx_messageInfo_RoutesResponse.Size(m)
}
func (m *RoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoutesResponse proto.InternalMessageInfo

func (m *RoutesResponse) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "stellar.services.network.v1.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "stellar.services.network.v1.InfoResponse")
	proto.RegisterType((*AllocateSubnetRequest)(nil), "stellar.services.network.v1.AllocateSubnetRequest")
	proto.RegisterType((*AllocateSubnetResponse)(nil), "stellar.services.network.v1.AllocateSubnetResponse")
	proto.RegisterType((*GetSubnetRequest)(nil), "stellar.services.network.v1.GetSubnetRequest")
	proto.RegisterType((*GetSubnetResponse)(nil), "stellar.services.network.v1.GetSubnetResponse")
	proto.RegisterType((*DeallocateSubnetRequest)(nil), "stellar.services.network.v1.DeallocateSubnetRequest")
	proto.RegisterType((*AllocateIPRequest)(nil), "stellar.services.network.v1.AllocateIPRequest")
	proto.RegisterType((*AllocateIPResponse)(nil), "stellar.services.network.v1.AllocateIPResponse")
	proto.RegisterType((*GetIPRequest)(nil), "stellar.services.network.v1.GetIPRequest")
	proto.RegisterType((*GetIPResponse)(nil), "stellar.services.network.v1.GetIPResponse")
	proto.RegisterType((*ReleaseIPRequest)(nil), "stellar.services.network.v1.ReleaseIPRequest")
	proto.RegisterType((*SubnetsResponse)(nil), "stellar.services.network.v1.SubnetsResponse")
	proto.RegisterType((*Subnet)(nil), "stellar.services.network.v1.Subnet")
	proto.RegisterType((*ConfigureRequest)(nil), "stellar.services.network.v1.ConfigureRequest")
	proto.RegisterType((*AddRouteRequest)(nil), "stellar.services.network.v1.AddRouteRequest")
	proto.RegisterType((*DeleteRouteRequest)(nil), "stellar.services.network.v1.DeleteRouteRequest")
	proto.RegisterType((*Route)(nil), "stellar.services.network.v1.Route")
	proto.RegisterType((*RoutesResponse)(nil), "stellar.services.network.v1.RoutesResponse")
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/network/v1/network.proto", fileDescriptor_5e613a22b6bc199d)
}

var fileDescriptor_5e613a22b6bc199d = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdb, 0x4e, 0xdb, 0x4c,
	0x10, 0x56, 0x4c, 0x70, 0xc8, 0x84, 0x43, 0x58, 0xfd, 0x7f, 0x8a, 0x4c, 0x25, 0x90, 0x2b, 0x51,
	0x28, 0xad, 0x2d, 0xa0, 0x57, 0x20, 0x24, 0x0e, 0xa9, 0x50, 0xaa, 0xb6, 0x44, 0xae, 0x84, 0xaa,
	0x56, 0xa5, 0x75, 0xe2, 0xc1, 0xb8, 0x35, 0x59, 0xd7, 0xde, 0x80, 0xe8, 0xc3, 0x72, 0xc1, 0x13,
	0xf4, 0x11, 0x2a, 0xbc, 0x6b, 0xc7, 0x58, 0xf1, 0xa1, 0x88, 0xbb, 0xf5, 0xe6, 0x3b, 0xcc, 0xce,
	0xac, 0x3f, 0x07, 0xf6, 0x6d, 0x87, 0x9d, 0x0f, 0x7b, 0x5a, 0x9f, 0x5e, 0xe8, 0x78, 0x6e, 0xfe,
	0x76, 0x91, 0x31, 0x3d, 0x60, 0xe8, 0xba, 0xa6, 0xaf, 0x9b, 0x9e, 0xa3, 0x07, 0xe8, 0x5f, 0x3a,
	0x7d, 0x0c, 0xf4, 0x01, 0xb2, 0x2b, 0xea, 0xff, 0xd4, 0x2f, 0x37, 0xa2, 0xa5, 0xe6, 0xf9, 0x94,
	0x51, 0xb2, 0x28, 0xe0, 0x5a, 0x04, 0xd5, 0xa2, 0xdf, 0x2f, 0x37, 0x94, 0x45, 0x9b, 0x52, 0xdb,
	0x45, 0x3d, 0x84, 0xf6, 0x86, 0x67, 0x3a, 0x5e, 0x78, 0xec, 0x9a, 0x33, 0x95, 0xff, 0x6c, 0x6a,
	0xd3, 0x70, 0xa9, 0xdf, 0xad, 0xf8, 0xae, 0x3a, 0x03, 0x8d, 0xce, 0xe0, 0x8c, 0x1a, 0xf8, 0x6b,
	0x88, 0x01, 0x53, 0x57, 0x60, 0x9a, 0x3f, 0x06, 0x1e, 0x1d, 0x04, 0x48, 0x5a, 0x20, 0x39, 0xd6,
	0x42, 0x65, 0xb9, 0xb2, 0x5a, 0x3f, 0x90, 0x6f, 0x6f, 0x96, 0xa4, 0x4e, 0xdb, 0x90, 0x1c, 0x4b,
	0x5d, 0x87, 0xff, 0xf7, 0x5d, 0x97, 0xf6, 0x4d, 0x86, 0x1f, 0x87, 0xbd, 0x01, 0x32, 0x21, 0x40,
	0x08, 0x54, 0x07, 0xd4, 0x42, 0x4e, 0x31, 0xc2, 0xb5, 0xfa, 0x15, 0x5a, 0x69, 0xb0, 0x90, 0xd7,
	0xa1, 0x11, 0x84, 0x3b, 0xdf, 0xfa, 0x8e, 0xe5, 0x0b, 0x9f, 0xd9, 0xdb, 0x9b, 0x25, 0xe0, 0xc0,
	0xc3, 0x4e, 0xdb, 0x30, 0x80, 0x43, 0x0e, 0x1d, 0xcb, 0x8f, 0xe5, 0xa5, 0x84, 0xfc, 0x0a, 0x34,
	0x8f, 0x90, 0x15, 0x97, 0xd1, 0x86, 0xf9, 0x04, 0xee, 0x81, 0x15, 0xa8, 0xa7, 0xf0, 0xa4, 0x8d,
	0xe6, 0xd8, 0xb3, 0x3f, 0xca, 0x69, 0x3c, 0x98, 0x8f, 0x9a, 0xd5, 0xe9, 0x46, 0xca, 0x19, 0x63,
	0x48, 0x3b, 0x4a, 0xa5, 0x1d, 0x27, 0x12, 0x8e, 0x7b, 0x40, 0x92, 0x8e, 0x89, 0xc9, 0x7b, 0xf7,
	0x2c, 0xbb, 0x86, 0xe4, 0x78, 0x63, 0x6b, 0xde, 0x86, 0xe9, 0x23, 0x64, 0xc5, 0xe5, 0x8e, 0xe3,
	0x3e, 0x87, 0x19, 0xc1, 0xcd, 0x37, 0x56, 0x4f, 0xa0, 0x69, 0xa0, 0x8b, 0x66, 0x50, 0xa2, 0x2f,
	0x5c, 0x43, 0xca, 0x2c, 0x3e, 0x79, 0xfc, 0x2e, 0xcc, 0xf1, 0x66, 0x05, 0x71, 0x09, 0xbb, 0x50,
	0xe3, 0x3d, 0x0b, 0x16, 0x2a, 0xcb, 0x13, 0xab, 0x8d, 0xcd, 0x67, 0x5a, 0xce, 0x6b, 0xa7, 0x89,
	0x5b, 0x10, 0x71, 0xd4, 0x3d, 0x90, 0xf9, 0x16, 0x79, 0x0a, 0xd5, 0xc4, 0x55, 0x98, 0xba, 0xbd,
	0x59, 0xaa, 0x86, 0x23, 0x09, 0x77, 0xc9, 0x02, 0xd4, 0x6c, 0x93, 0xe1, 0x95, 0x79, 0x2d, 0x3a,
	0x12, 0x3d, 0xaa, 0xc7, 0xd0, 0x3c, 0xa4, 0x83, 0x33, 0xc7, 0x1e, 0xfa, 0x18, 0x9d, 0x75, 0x07,
	0x64, 0x6e, 0x10, 0xaa, 0x95, 0xac, 0x49, 0x50, 0xd4, 0x23, 0x98, 0xdb, 0xb7, 0x2c, 0x83, 0x0e,
	0x59, 0xac, 0x97, 0x5f, 0x5b, 0x0b, 0x64, 0x66, 0xfa, 0x36, 0x32, 0x51, 0x9a, 0x78, 0x52, 0xdf,
	0x02, 0x69, 0xa3, 0x8b, 0x0c, 0x1f, 0x41, 0x6b, 0x17, 0x26, 0x43, 0x95, 0x07, 0xd2, 0xdf, 0xc1,
	0x6c, 0x48, 0x1f, 0xcd, 0x6d, 0x1b, 0x64, 0x3f, 0xdc, 0x11, 0x63, 0x53, 0x73, 0x5b, 0xc4, 0x4f,
	0x20, 0x18, 0x9b, 0x7f, 0xa6, 0xa0, 0xf6, 0x81, 0xff, 0x48, 0xbe, 0x40, 0xf5, 0x2e, 0x05, 0xc9,
	0x6a, 0x2e, 0x3f, 0x91, 0x9b, 0xca, 0x5a, 0x09, 0xa4, 0x28, 0xf2, 0x1a, 0x66, 0xef, 0xa7, 0x21,
	0xd9, 0xcc, 0x25, 0x8f, 0xcd, 0x59, 0x65, 0xeb, 0x9f, 0x38, 0xc2, 0xfa, 0x07, 0xd4, 0xe3, 0x04,
	0x24, 0xaf, 0x72, 0x15, 0xd2, 0x89, 0xaa, 0x68, 0x65, 0xe1, 0xc2, 0xeb, 0x3b, 0x34, 0xd3, 0x39,
	0x49, 0x5e, 0xe7, 0x6a, 0x64, 0xc4, 0xaa, 0xd2, 0xd2, 0xf8, 0x67, 0x4d, 0x8b, 0x3e, 0x6b, 0xda,
	0x9b, 0xbb, 0xcf, 0x1a, 0x39, 0x86, 0x9a, 0x78, 0x71, 0x49, 0x06, 0x44, 0x79, 0x59, 0xe2, 0x1d,
	0x19, 0x5d, 0x9f, 0x0b, 0x80, 0x51, 0x10, 0x12, 0xad, 0x54, 0x87, 0xe3, 0x2c, 0x52, 0xf4, 0xd2,
	0x78, 0x61, 0x77, 0x0a, 0x93, 0x61, 0xf2, 0x91, 0xb5, 0xa2, 0xd6, 0x8e, 0x4c, 0x5e, 0x94, 0x81,
	0x0a, 0x7d, 0x03, 0xea, 0x71, 0x60, 0x16, 0x4c, 0x3b, 0x1d, 0xac, 0x99, 0x3d, 0x37, 0xa0, 0x1e,
	0x07, 0x53, 0x81, 0x66, 0x3a, 0xc0, 0x32, 0x35, 0xbb, 0x30, 0x15, 0x65, 0x13, 0xc9, 0x1f, 0x58,
	0x2a, 0xc2, 0x32, 0x15, 0x4f, 0xa0, 0x91, 0x08, 0x29, 0xa2, 0x17, 0x5c, 0xbb, 0x74, 0x9c, 0x65,
	0xea, 0xbe, 0x07, 0x99, 0x27, 0x4e, 0xe6, 0x85, 0x5b, 0x2f, 0x4e, 0x9c, 0xf8, 0xbe, 0x1d, 0xec,
	0x7e, 0xde, 0x79, 0xc0, 0x1f, 0xc2, 0x1d, 0xb1, 0xfc, 0x54, 0xe9, 0xc9, 0xa1, 0xfb, 0xd6, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x7c, 0xce, 0x1c, 0x58, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	AllocateSubnet(ctx context.Context, in *AllocateSubnetRequest, opts ...grpc.CallOption) (*AllocateSubnetResponse, error)
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error)
	DeallocateSubnet(ctx context.Context, in *DeallocateSubnetRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Subnets(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SubnetsResponse, error)
	AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPResponse, error)
	GetIP(ctx context.Context, in *GetIPRequest, opts ...grpc.CallOption) (*GetIPResponse, error)
	ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*types.Empty, error)
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*types.Empty, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*types.Empty, error)
	Routes(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*RoutesResponse, error)
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) AllocateSubnet(ctx context.Context, in *AllocateSubnetRequest, opts ...grpc.CallOption) (*AllocateSubnetResponse, error) {
	out := new(AllocateSubnetResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/AllocateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error) {
	out := new(GetSubnetResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/GetSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeallocateSubnet(ctx context.Context, in *DeallocateSubnetRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/DeallocateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) Subnets(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*SubnetsResponse, error) {
	out := new(SubnetsResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/Subnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) AllocateIP(ctx context.Context, in *AllocateIPRequest, opts ...grpc.CallOption) (*AllocateIPResponse, error) {
	out := new(AllocateIPResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/AllocateIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetIP(ctx context.Context, in *GetIPRequest, opts ...grpc.CallOption) (*GetIPResponse, error) {
	out := new(GetIPResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/GetIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ReleaseIP(ctx context.Context, in *ReleaseIPRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/ReleaseIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) Routes(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*RoutesResponse, error) {
	out := new(RoutesResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.network.v1.Network/Routes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	AllocateSubnet(context.Context, *AllocateSubnetRequest) (*AllocateSubnetResponse, error)
	GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error)
	DeallocateSubnet(context.Context, *DeallocateSubnetRequest) (*types.Empty, error)
	Subnets(context.Context, *types.Empty) (*SubnetsResponse, error)
	AllocateIP(context.Context, *AllocateIPRequest) (*AllocateIPResponse, error)
	GetIP(context.Context, *GetIPRequest) (*GetIPResponse, error)
	ReleaseIP(context.Context, *ReleaseIPRequest) (*types.Empty, error)
	Configure(context.Context, *ConfigureRequest) (*types.Empty, error)
	AddRoute(context.Context, *AddRouteRequest) (*types.Empty, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*types.Empty, error)
	Routes(context.Context, *types.Empty) (*RoutesResponse, error)
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_AllocateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).AllocateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/AllocateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).AllocateSubnet(ctx, req.(*AllocateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/GetSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeallocateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeallocateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeallocateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/DeallocateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeallocateSubnet(ctx, req.(*DeallocateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_Subnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).Subnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/Subnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).Subnets(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_AllocateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).AllocateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/AllocateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).AllocateIP(ctx, req.(*AllocateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/GetIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetIP(ctx, req.(*GetIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ReleaseIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ReleaseIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/ReleaseIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ReleaseIP(ctx, req.(*ReleaseIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_Routes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).Routes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.network.v1.Network/Routes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).Routes(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.network.v1.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Network_Info_Handler,
		},
		{
			MethodName: "AllocateSubnet",
			Handler:    _Network_AllocateSubnet_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _Network_GetSubnet_Handler,
		},
		{
			MethodName: "DeallocateSubnet",
			Handler:    _Network_DeallocateSubnet_Handler,
		},
		{
			MethodName: "Subnets",
			Handler:    _Network_Subnets_Handler,
		},
		{
			MethodName: "AllocateIP",
			Handler:    _Network_AllocateIP_Handler,
		},
		{
			MethodName: "GetIP",
			Handler:    _Network_GetIP_Handler,
		},
		{
			MethodName: "ReleaseIP",
			Handler:    _Network_ReleaseIP_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Network_Configure_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _Network_AddRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _Network_DeleteRoute_Handler,
		},
		{
			MethodName: "Routes",
			Handler:    _Network_Routes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/stellar/api/services/network/v1/network.proto",
}
