// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/ehazlett/stellar/api/services/health/v1/health.proto

package health // import "github.com/ehazlett/stellar/api/services/health/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_90625c8dc2efc894, []int{0}
}
func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (dst *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(dst, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

type InfoResponse struct {
	ID                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_90625c8dc2efc894, []int{1}
}
func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoResponse.Unmarshal(m, b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
}
func (dst *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(dst, src)
}
func (m *InfoResponse) XXX_Size() int {
	return xxx_messageInfo_InfoResponse.Size(m)
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type NodeHealth struct {
	OSName    string `protobuf:"bytes,1,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	OSVersion string `protobuf:"bytes,2,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// TODO: use gogoproto.stdtime (returning panic: message/group field time.Time:bytes without pointer when trying to use)
	StartedAt            *types.Timestamp `protobuf:"bytes,3,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	Cpus                 int64            `protobuf:"varint,4,opt,name=cpus,proto3" json:"cpus,omitempty"`
	MemoryTotal          int64            `protobuf:"varint,5,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryFree           int64            `protobuf:"varint,6,opt,name=memory_free,json=memoryFree,proto3" json:"memory_free,omitempty"`
	MemoryUsed           int64            `protobuf:"varint,7,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	Peers                []*Peer          `protobuf:"bytes,8,rep,name=peers" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NodeHealth) Reset()         { *m = NodeHealth{} }
func (m *NodeHealth) String() string { return proto.CompactTextString(m) }
func (*NodeHealth) ProtoMessage()    {}
func (*NodeHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_90625c8dc2efc894, []int{2}
}
func (m *NodeHealth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeHealth.Unmarshal(m, b)
}
func (m *NodeHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeHealth.Marshal(b, m, deterministic)
}
func (dst *NodeHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeHealth.Merge(dst, src)
}
func (m *NodeHealth) XXX_Size() int {
	return xxx_messageInfo_NodeHealth.Size(m)
}
func (m *NodeHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeHealth.DiscardUnknown(m)
}

var xxx_messageInfo_NodeHealth proto.InternalMessageInfo

func (m *NodeHealth) GetOSName() string {
	if m != nil {
		return m.OSName
	}
	return ""
}

func (m *NodeHealth) GetOSVersion() string {
	if m != nil {
		return m.OSVersion
	}
	return ""
}

func (m *NodeHealth) GetStartedAt() *types.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *NodeHealth) GetCpus() int64 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *NodeHealth) GetMemoryTotal() int64 {
	if m != nil {
		return m.MemoryTotal
	}
	return 0
}

func (m *NodeHealth) GetMemoryFree() int64 {
	if m != nil {
		return m.MemoryFree
	}
	return 0
}

func (m *NodeHealth) GetMemoryUsed() int64 {
	if m != nil {
		return m.MemoryUsed
	}
	return 0
}

func (m *NodeHealth) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type HealthResponse struct {
	Health               *NodeHealth `protobuf:"bytes,1,opt,name=health" json:"health,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_90625c8dc2efc894, []int{3}
}
func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (dst *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(dst, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetHealth() *NodeHealth {
	if m != nil {
		return m.Health
	}
	return nil
}

type Peer struct {
	ID                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Labels               map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_90625c8dc2efc894, []int{4}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (dst *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(dst, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "stellar.services.health.v1.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "stellar.services.health.v1.InfoResponse")
	proto.RegisterType((*NodeHealth)(nil), "stellar.services.health.v1.NodeHealth")
	proto.RegisterType((*HealthResponse)(nil), "stellar.services.health.v1.HealthResponse")
	proto.RegisterType((*Peer)(nil), "stellar.services.health.v1.Peer")
	proto.RegisterMapType((map[string]string)(nil), "stellar.services.health.v1.Peer.LabelsEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.health.v1.Health/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Health(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/stellar.services.health.v1.Health/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Health(context.Context, *types.Empty) (*HealthResponse, error)
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.health.v1.Health/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellar.services.health.v1.Health/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Health(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellar.services.health.v1.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Health_Info_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Health_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/ehazlett/stellar/api/services/health/v1/health.proto",
}

func init() {
	proto.RegisterFile("github.com/ehazlett/stellar/api/services/health/v1/health.proto", fileDescriptor_health_90625c8dc2efc894)
}

var fileDescriptor_health_90625c8dc2efc894 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xc7, 0xd9, 0x4d, 0xb2, 0x31, 0x67, 0x5b, 0x91, 0xa1, 0x94, 0x65, 0xbd, 0x48, 0x8c, 0x50,
	0x83, 0x94, 0x5d, 0x1a, 0x41, 0x8c, 0x05, 0xc5, 0xd2, 0x8a, 0x85, 0xd2, 0x96, 0x6d, 0x15, 0xf4,
	0x26, 0x4c, 0xb2, 0x27, 0xc9, 0xe2, 0x6e, 0x66, 0x9d, 0x99, 0x0d, 0xc4, 0xb7, 0xf2, 0xd2, 0x67,
	0xf0, 0x1d, 0x72, 0x91, 0x27, 0x91, 0x9d, 0x99, 0xd4, 0xa8, 0x34, 0xa5, 0x57, 0xfb, 0x3f, 0xe7,
	0xfc, 0x66, 0xcf, 0x9c, 0x8f, 0x81, 0xb7, 0xe3, 0x44, 0x4e, 0x8a, 0x41, 0x30, 0x64, 0x59, 0x88,
	0x13, 0xfa, 0x3d, 0x45, 0x29, 0x43, 0x21, 0x31, 0x4d, 0x29, 0x0f, 0x69, 0x9e, 0x84, 0x02, 0xf9,
	0x2c, 0x19, 0xa2, 0x08, 0x27, 0x48, 0x53, 0x39, 0x09, 0x67, 0x07, 0x46, 0x05, 0x39, 0x67, 0x92,
	0x11, 0xdf, 0xc0, 0xc1, 0x0a, 0x0c, 0x4c, 0x78, 0x76, 0xe0, 0xef, 0x8c, 0xd9, 0x98, 0x29, 0x2c,
	0x2c, 0x95, 0x3e, 0xe1, 0x3f, 0x1e, 0x33, 0x36, 0x4e, 0x31, 0x54, 0xd6, 0xa0, 0x18, 0x85, 0x98,
	0xe5, 0x72, 0x6e, 0x82, 0xcd, 0x7f, 0x83, 0x32, 0xc9, 0x50, 0x48, 0x9a, 0xe5, 0x1a, 0x68, 0x6f,
	0x83, 0x7b, 0x3a, 0x1d, 0xb1, 0x08, 0xbf, 0x15, 0x28, 0x64, 0x7b, 0x0f, 0xb6, 0xb4, 0x29, 0x72,
	0x36, 0x15, 0x48, 0x76, 0xc1, 0x4e, 0x62, 0xcf, 0x6a, 0x59, 0x9d, 0xc6, 0x91, 0xb3, 0x5c, 0x34,
	0xed, 0xd3, 0xe3, 0xc8, 0x4e, 0xe2, 0xf6, 0x2f, 0x1b, 0xe0, 0x9c, 0xc5, 0xf8, 0x41, 0x5d, 0x8e,
	0x3c, 0x85, 0x3a, 0x13, 0xfd, 0x29, 0xcd, 0xd0, 0xb0, 0xb0, 0x5c, 0x34, 0x9d, 0x8b, 0xab, 0x73,
	0x9a, 0x61, 0xe4, 0x30, 0x51, 0x7e, 0xc9, 0x3e, 0x00, 0x13, 0xfd, 0x19, 0x72, 0x91, 0xb0, 0xa9,
	0x67, 0x2b, 0x6e, 0x7b, 0xb9, 0x68, 0x36, 0x2e, 0xae, 0x3e, 0x69, 0x67, 0xd4, 0x60, 0xc2, 0x48,
	0xd2, 0x03, 0x10, 0x92, 0x72, 0x89, 0x71, 0x9f, 0x4a, 0xaf, 0xd2, 0xb2, 0x3a, 0x6e, 0xd7, 0x0f,
	0x74, 0x39, 0xc1, 0xaa, 0x9c, 0xe0, 0x7a, 0x55, 0x4e, 0xd4, 0x30, 0xf4, 0x3b, 0x49, 0x08, 0x54,
	0x87, 0x79, 0x21, 0xbc, 0x6a, 0xcb, 0xea, 0x54, 0x22, 0xa5, 0xc9, 0x13, 0xd8, 0xca, 0x30, 0x63,
	0x7c, 0xde, 0x97, 0x4c, 0xd2, 0xd4, 0xab, 0xa9, 0x98, 0xab, 0x7d, 0xd7, 0xa5, 0x8b, 0x34, 0xc1,
	0x98, 0xfd, 0x11, 0x47, 0xf4, 0x1c, 0x45, 0x80, 0x76, 0xbd, 0xe7, 0x88, 0x6b, 0x40, 0x21, 0x30,
	0xf6, 0xea, 0xeb, 0xc0, 0x47, 0x81, 0x31, 0x79, 0x09, 0xb5, 0x1c, 0x91, 0x0b, 0xef, 0x41, 0xab,
	0xd2, 0x71, 0xbb, 0xad, 0xe0, 0xf6, 0x61, 0x06, 0x97, 0x88, 0x3c, 0xd2, 0x78, 0xfb, 0x12, 0x1e,
	0xea, 0x46, 0xde, 0xf4, 0xfd, 0x0d, 0x38, 0x1a, 0x55, 0xfd, 0x74, 0xbb, 0x7b, 0x9b, 0x7e, 0xf5,
	0x67, 0x10, 0x91, 0x39, 0xd5, 0xfe, 0x69, 0x41, 0xb5, 0xcc, 0x70, 0xdb, 0x00, 0x89, 0x07, 0x75,
	0x1a, 0xc7, 0x1c, 0x85, 0xd0, 0x93, 0x88, 0x56, 0x26, 0x39, 0x06, 0x27, 0xa5, 0x03, 0x4c, 0x85,
	0x57, 0x51, 0x55, 0xec, 0xdf, 0x55, 0x45, 0x70, 0xa6, 0xf0, 0x93, 0xa9, 0xe4, 0xf3, 0xc8, 0x9c,
	0xf5, 0x7b, 0xe0, 0xae, 0xb9, 0xc9, 0x23, 0xa8, 0x7c, 0xc5, 0xb9, 0xbe, 0x47, 0x54, 0x4a, 0xb2,
	0x03, 0xb5, 0x19, 0x4d, 0x0b, 0x34, 0xe9, 0xb5, 0xf1, 0xda, 0x7e, 0x65, 0x75, 0x7f, 0x58, 0xe0,
	0x98, 0xbd, 0xfa, 0x0c, 0xd5, 0x72, 0x1d, 0xc9, 0xb3, 0x4d, 0x77, 0x58, 0xdb, 0x5f, 0xbf, 0x73,
	0x37, 0x68, 0x3a, 0x7c, 0x76, 0x93, 0x64, 0xf7, 0xbf, 0xad, 0x3a, 0x29, 0x5f, 0x90, 0xff, 0x7c,
	0xd3, 0xbf, 0xfe, 0x9e, 0xd7, 0xd1, 0xe1, 0x97, 0xde, 0xfd, 0x5f, 0xfe, 0xa1, 0x56, 0x03, 0x47,
	0x25, 0x7e, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x1d, 0x3e, 0x3b, 0x3d, 0x04, 0x00, 0x00,
}
